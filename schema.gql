# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Token {
  jwt: String!
}

type User {
  _id: ID!
  firstName: String
  secondName: String
  middleName: String
  password: String!
  email: String!
}

type Member {
  artist: String
  instrument: String
  years: [String]
}

type Band {
  _id: ID!
  name: String
  origin: String
  members: [Member]
  website: String
  genres: [Genre]
}

type Artist {
  _id: ID!
  firstName: String
  secondName: String
  middleName: String
  birthDate: String
  birthPlace: String
  country: String
  bands: [Band]
  instruments: [ID]
}

type Genre {
  _id: ID!
  name: String
  description: String
  country: String
  year: Int
}

type Track {
  _id: ID!
  title: String
  album: ID
  duration: Int
  released: Int
  bands: [Band]
  genres: [Genre]
  artists: [Artist]
}

type Album {
  _id: ID!
  name: String
  released: Int
  artists: [Artist]
  bands: [Band]
  genres: [Genre]
  tracks: [Track]
  image: String
}

type Favourite {
  _id: ID!
  userId: ID!
  bands: [Band]
  genres: [Genre]
  artists: [Artist]
  tracks: [Track]
}

type Query {
  users: [User!]!
  user(id: String!): User
  jwt(loginUserInput: LoginUserInput!): Token!
  artists(pagingArtistInput: PagingArtistInput): [Artist]
  artist(id: String!): Artist!
  bands(pagingBandInput: PagingBandInput): [Band]
  band(id: String!): Band!
  genres(pagingGenreInput: PagingGenreInput): [Genre]
  genre(id: String!): Genre!
  albums(pagingAlbumInput: PagingAlbumInput): [Album]
  album(id: String!): Album!
  tracks(pagingTrackInput: PagingTrackInput): [Track]
  track(id: String!): Track!
  favourites: Favourite
}

input LoginUserInput {
  password: String!
  email: String!
}

input PagingArtistInput {
  offset: Int = 0
  limit: Int = 5
}

input PagingBandInput {
  offset: Int = 0
  limit: Int = 5
}

input PagingGenreInput {
  offset: Int = 0
  limit: Int = 5
}

input PagingAlbumInput {
  offset: Int = 0
  limit: Int = 5
}

input PagingTrackInput {
  offset: Int = 0
  limit: Int = 5
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createArtist(createArtistInput: CreateArtistInput!): Artist!
  updateArtist(updateArtistInput: UpdateArtistInput!): Artist!
  removeArtist(id: String!): Artist!
  createBand(createBandInput: CreateBandInput!): Band!
  updateBand(updateBandInput: UpdateBandInput!): Band!
  removeBand(id: String!): Band
  createGenre(createGenreInput: CreateGenreInput!): Genre!
  updateGenre(updateGenreInput: UpdateGenreInput!): Genre!
  removeGenre(id: String!): Genre!
  createAlbum(createAlbumInput: CreateAlbumInput!): Album!
  updateAlbum(updateAlbumInput: UpdateAlbumInput!): Album!
  removeAlbum(id: String!): Album!
  createTrack(createTrackInput: CreateTrackInput!): Track!
  updateTrack(updateTrackInput: UpdateTrackInput!): Track!
  removeTrack(id: String!): Track!
  addToFavourites(addFavouriteInput: AddFavouriteInput!): Favourite!
  removeFromFavourites(removeFromFavouriteInput: RemoveFromFavouriteInput!): Favourite!
  removeFavourite(id: String!): Favourite!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  middleName: String
  password: String!
  email: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  middleName: String
  password: String
  email: String
  id: Int!
}

input CreateArtistInput {
  firstName: String
  secondName: String
  middleName: String
  birthDate: String
  birthPlace: String
  country: String
  bandsIds: [ID]
  instruments: [ID]
}

input UpdateArtistInput {
  firstName: String
  secondName: String
  middleName: String
  birthDate: String
  birthPlace: String
  country: String
  bandsIds: [ID!]
  instruments: [ID!]
  _id: ID!
}

input CreateBandInput {
  name: String
  origin: String
  members: [CreateMemberInput]
  website: String
  genresIds: [ID]
}

input CreateMemberInput {
  artist: String
  instrument: String
  years: [String]
}

input UpdateBandInput {
  name: String
  origin: String
  members: [CreateMemberInput!]
  website: String
  genresIds: [ID!]
  _id: ID!
}

input CreateGenreInput {
  name: String
  description: String
  country: String
  year: Int
}

input UpdateGenreInput {
  name: String
  description: String
  country: String
  year: Int
  _id: ID!
}

input CreateAlbumInput {
  name: String
  released: Int
  artistsIds: [ID]
  bandsids: [String]
  genresids: [String]
  trackIds: [String]
  image: String
}

input UpdateAlbumInput {
  name: String
  released: Int
  artistsIds: [ID!]
  bandsids: [String!]
  genresids: [String!]
  trackIds: [String!]
  image: String
  _id: ID!
}

input CreateTrackInput {
  title: String!
  albumId: ID
  duration: Int
  released: Int
  bandsIds: [String]
  genresIds: [String]
  artistsIds: [String]
}

input UpdateTrackInput {
  title: String
  albumId: ID
  duration: Int
  released: Int
  bandsIds: [String!]
  genresIds: [String!]
  artistsIds: [String!]
  _id: String!
}

input AddFavouriteInput {
  type: String!
  id: ID!
}

input RemoveFromFavouriteInput {
  type: String!
  id: ID!
}